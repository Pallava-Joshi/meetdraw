// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  username        String    @unique
  password        String?
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  photo           String?
  joinedrooms     Room[]    @relation(name: "participants")
  controlledrooms Room[]
  Chat            Chat[]
  accounts        Account[]
  sessions        Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Room {
  id           String   @id @default(uuid())
  title        String
  joinCode     String   @unique
  participants User[]   @relation(name: "participants")
  admin        User     @relation(fields: [adminId], references: [id])
  adminId      String
  Chat         Chat[]
  Draw         Draw[]
  createdAt    DateTime @default(now())
}

model Chat {
  id           String @id @default(uuid())
  serialNumber Int    @default(autoincrement())
  content      String
  user         User   @relation(references: [id], fields: [userId])
  userId       String
  room         Room   @relation(references: [id], fields: [roomId])
  roomId       String
}

enum Shape {
  rectangle
  diamond
  circle
  line
  arrow
  text
  freehand
}

model Draw {
  id          String  @id
  shape       Shape
  strokeStyle String
  fillStyle   String
  lineWidth   Int
  font        String?
  fontSize    String?
  startX      Int?
  startY      Int?
  endX        Int?
  endY        Int?
  text        String?
  points      Json?
  room        Room    @relation(references: [id], fields: [roomId])
  roomId      String
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
